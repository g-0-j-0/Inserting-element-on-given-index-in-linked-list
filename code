class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next

class Linked_list:
    def __init__(self):
        self.head=None

    def Insert_at_begining(self,data):
        node=Node(data,self.head)
        self.head=node

    def Insert_at_index(self,index,data):
        if 0>index>self.get_length():
            raise Exception("Invalid index")

        if index==0:
            self.Insert_at_begining(data)
            return

        count=0
        itr=self.head
        while itr:
            if count==index-1:
                node=Node(data,itr.next)
                itr.next=node
                break
            itr=itr.next
            count+=1

    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count += 1
            itr = itr.next
        return count
    def Print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr=self.head
        llstr=""

        while itr:
            llstr=llstr+str(itr.data)+"-->"
            itr=itr.next
        print(llstr)

if __name__=="__main__":
    ll=Linked_list()
    ll.Insert_at_begining("are")
    ll.Insert_at_begining("we")
    ll.Insert_at_begining("am")
    ll.Insert_at_begining("i")
    ll.Print()
    ll.Insert_at_index(2,"b'coz")
    ll.Print()
